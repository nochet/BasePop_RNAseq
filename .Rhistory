select(id,treatment,tissue,batch,SV1,SV2)
rownames(phenDat.sva) <- phenDat.sva[,1]
phenDat.sva[,1] <- NULL
# Reformat column names
rownames(phenDat.sva) = sub("\\-","",rownames(phenDat.sva)) #regex escape the escape
#phenDat.sva <- as.matrix(phenDat.sva)
#rp = rownames(phenDat.sva)
#rp[duplicated(rp)]
# countData colnames() must be identical to colData rownames()
all(rownames(phenDat.sva) %in% colnames(countdata))
countdata <- countdata[, rownames(phenDat.sva)]
all(rownames(phenDat.sva) == colnames(countdata))
phenDat.sva$batch <- as.factor(phenDat.sva$batch)
phenDat.sva$treatment <- as.factor(phenDat.sva$treatment)
phenDat.sva$tissue <- as.factor(phenDat.sva$tissue)
# DESeqDataSet for all variables, no interaction
dds.ttSS <- DESeqDataSetFromMatrix(countData = countdata,
colData = phenDat.sva,
design = ~ SV1 + SV2 + batch + tissue + treatment)
dds_deseq <- DESeq(dds.ttSS)
res.dds <- results(dds_deseq)
(res.dds <- res.dds[order(res.dds$padj), ])
# 22 rows did not converge
## Merge with normalized count data
res.dds_table <- merge(as.data.frame(res.dds),
as.data.frame(counts(dds_deseq, normalized=TRUE)),
by="row.names", sort=FALSE)
names(res.dds_table)[1] <- "Gene"
save(res.dds, file = "../../processed/DESEQ/res.dds.Rda")
save(dds_deseq, file = "../../processed/DESEQ/dds_deseq.Rda")
save(res.dds_table, file = "../../processed/DESEQ/DEseqSVA_Noint_resOrdered_padj.Rda")
write.csv(res.dds_table,
"../../processed/DESEQ/DEseqSVA_Noint_resOrdered_padj.csv", row.names=TRUE)
load("../../processed/DESEQ/DEseqSVA_Noint_resOrdered_padj.Rda")
# Examine plot of p-values
hist(res.dds$pvalue, breaks=50, col="grey")
# Examine independent filtering
metadata(res.dds)$filterThreshold
plot(metadata(res.dds)$filterNumRej, type="b", xlab="quantiles of baseMean", ylab="number of rejections")
dds.sva <- estimateSizeFactors(dds)
dat.sva <- counts(dds.sva, normalized=TRUE)
cc.c <- rowSums(dat.sva)
#remove all genes with 0s for all samples
dat.sva <- dat.sva[which(cc.c>0),]
phenDat.sva <- read.csv("../../processed/describe_samples_batch.csv", stringsAsFactors = FALSE)
names(phenDat.sva)[5]<-"batch"
#cbind(phenDat.sva, colnames(dat.sva))
mod <- model.matrix(~as.factor(treatment)*
as.factor(tissue) +
as.factor(batch),
data=phenDat.sva)
mod0 <- model.matrix(~as.factor(batch), data=phenDat.sva)
# calculate number of surrogate variables
n.sv <- num.sv(dat.sva, mod, method = "be")
print(c("Calculated number of significant SVs = ", n.sv))
svobj <- svaseq(dat.sva, mod, mod0, n.sv=n.sv)
phenDat.sva$SV1 <- svobj$sv[,1]
phenDat.sva$SV2 <- svobj$sv[,2]
ggplot(phenDat.sva, aes(x=SV1, y=SV2)) +
geom_point(alpha=1/5, size=3)
save(phenDat.sva, file = "../../processed/DESEQ/phenDat.sva.Rda")
load("../../processed/DESEQ/DEseqSVA_Noint_resOrdered_padj.Rda")
(res.dds <- res.dds[order(res.dds$padj), ])
res.dds <- results(dds_deseq)
countdata <- read.csv("../../processed/gene_count_matrix.csv", row.names="gene_id")
# Reformat column names
names(countdata) = sub("\\.","",names(countdata)) #regex escape the escape
countdata <- as.matrix(countdata)
phenDat.sva <- phenDat.sva %>%
select(id,treatment,tissue,batch,SV1,SV2)
rownames(phenDat.sva) <- phenDat.sva[,1]
phenDat.sva[,1] <- NULL
# Reformat column names
rownames(phenDat.sva) = sub("\\-","",rownames(phenDat.sva)) #regex escape the escape
#phenDat.sva <- as.matrix(phenDat.sva)
#rp = rownames(phenDat.sva)
#rp[duplicated(rp)]
# countData colnames() must be identical to colData rownames()
all(rownames(phenDat.sva) %in% colnames(countdata))
countdata <- countdata[, rownames(phenDat.sva)]
all(rownames(phenDat.sva) == colnames(countdata))
phenDat.sva$batch <- as.factor(phenDat.sva$batch)
phenDat.sva$treatment <- as.factor(phenDat.sva$treatment)
phenDat.sva$tissue <- as.factor(phenDat.sva$tissue)
# DESeqDataSet for all variables, no interaction
dds.ttSS <- DESeqDataSetFromMatrix(countData = countdata,
colData = phenDat.sva,
design = ~ SV1 + SV2 + batch + tissue + treatment)
dds_deseq <- DESeq(dds.ttSS)
res.dds <- results(dds_deseq)
(res.dds <- res.dds[order(res.dds$padj), ])
# 22 rows did not converge
## Merge with normalized count data
res.dds_table <- merge(as.data.frame(res.dds),
as.data.frame(counts(dds_deseq, normalized=TRUE)),
by="row.names", sort=FALSE)
names(res.dds_table)[1] <- "Gene"
save(res.dds, file = "../../processed/DESEQ/res.dds.Rda")
save(dds_deseq, file = "../../processed/DESEQ/dds_deseq.Rda")
save(res.dds_table, file = "../../processed/DESEQ/DEseqSVA_Noint_resOrdered_padj.Rda")
write.csv(res.dds_table,
"../../processed/DESEQ/DEseqSVA_Noint_resOrdered_padj.csv", row.names=TRUE)
load("../../processed/DESEQ/DEseqSVA_Noint_resOrdered_padj.Rda")
# Examine plot of p-values
hist(res.dds$pvalue, breaks=50, col="grey")
# Examine independent filtering
metadata(res.dds)$filterThreshold
plot(metadata(res.dds)$filterNumRej, type="b", xlab="quantiles of baseMean", ylab="number of rejections")
load("../../processed/DESEQ/DEseqSVA_Noint_resOrdered_padj.Rda")
# Could do with built-in DESeq2 function:
DESeq2::plotMA(dds_deseq, ylim=c(-1,1))
# Alternatively
maplot <- function (res.dds_table, thresh=0.05, labelsig=TRUE, textcx=1, ...) {
with(res.dds_table, plot(baseMean, log2FoldChange, pch=20, cex=.5, log="x", ...))
with(subset(res.dds_table, padj<thresh), points(baseMean, log2FoldChange, col="red", pch=20, cex=1.5))
if (labelsig) {
require(calibrate)
with(subset(res.dds_table, padj<thresh), textxy(baseMean, log2FoldChange, labs="Gene", cex=textcx, col=2))
}
}
png("diffexpr-maplot.png", 1500, 1000, pointsize=20)
maplot(res.dds_table, ylim=c(-2,2), main="MA Plot")
dev.off()
# see all results available
resultsNames(dds_deseq)
#resDR_C <- results(dds_deseq, "treatment_DR_vs_C")
results(dds_deseq, contrast=c("treatment","C","DR"))
load("../../processed/DESEQ/DEseqSVA_Noint_resOrdered_padj.Rda")
par(mar=c(5,5,5,5), cex=1.0, cex.main=1.4, cex.axis=1.4, cex.lab=1.4)
topT <- as.data.frame(res.dds_table)
#Adjusted P values (FDR Q values)
with(topT, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", cex=1.0, xlab=bquote(~Log[2]~fold~change), ylab=bquote(~-log[10]~Q~value)))
with(subset(topT, padj<0.05 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(padj), pch=20, col="red", cex=0.5))
#with(subset(topT, padj<0.05 & abs(log2FoldChange)>2), text(log2FoldChange, -log10(padj), labels=subset(rownames(topT), topT$padj<0.05 & abs(topT$log2FoldChange)>2), cex=0.8, pos=3))
#Add lines for absolute FC>2 and P-value cut-off at FDR Q<0.05
abline(v=0, col="black", lty=3, lwd=1.0)
abline(v=-2, col="black", lty=4, lwd=2.0)
abline(v=2, col="black", lty=4, lwd=2.0)
abline(h=-log10(max(topT$pvalue[topT$padj<0.05], na.rm=TRUE)), col="black", lty=4, lwd=2.0)
with(subset(topT, padj<0.05 & abs(log2FoldChange)>2), text(log2FoldChange, -log10(padj), labels=subset(rownames(topT), topT$padj<0.05 & abs(topT$log2FoldChange)>2), cex=0.8, pos=3))
#dev.off()
with(res.dds_table, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-5,5), ylim=c(0,25)))
# Add colored points: red if padj<0.05, orange of log2FC>1, green if both)
with(subset(res.dds_table, padj<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
with(subset(res.dds_table, abs(log2FoldChange)>1), points(log2FoldChange, -log10(pvalue), pch=20, col="orange"))
with(subset(res.dds_table, padj<.05 & abs(log2FoldChange)>1), points(log2FoldChange, -log10(pvalue), pch=20, col="green"))
# Label points with the textxy function from the calibrate plot
library(calibrate)
with(subset(res.dds_table, padj<.05 & abs(log2FoldChange)>1), textxy(log2FoldChange, -log10(pvalue), labs=Gene, cex=.8))
# Comparisons across treatment levels
resultsNames(dds_dds)
# Comparisons across treatment levels
resultsNames(res_dds)
# Comparisons across treatment levels
resultsNames(res.dds)
# Comparisons across treatment levels
resultsNames(dds_deseq)
# C vs DR
cdr.dds <- results(dds_deseq, contrast=c("treatment","C","DR"))
mcols(cdr.dds) # mcols = metadata columns, i.e. element-wise metadata
(resOrd_cdrdds <- cdr.dds[order(cdr.dds$padj), ])
write.csv(resOrd_cdrdds,
"../../processed/DESEQ/CvDR_DEseqSVA_dds_resOrdered_padj.csv", row.names=TRUE)
(resOrd_cdrdds <- cdr.dds[order(cdr.dds$padj), ])
resOrd_cdrdds[1:40]
resOrd_cdrdds[1:6]
resOrd_cdrdds[1:40,]
resOrd_cdrdds
#C vs HS
hs.dds <- results(dds_deseq, contrast=c("treatment","C","HS"))
(resOrd_hsdds <- hs.dds[order(hs.dds$padj), ])
write.csv(resOrd_hsdds,
"../../processed/DESEQ/CvHS_DEseqSVA_dds_resOrdered_padj.csv",
row.names=TRUE)
resOrd_hsdds
#DR vs HS
dh.dds <- results(dds_deseq, contrast=c("treatment","DR","HS"))
(resOrd_dhdds <- dh.dds[order(dh.dds$padj), ])
write.csv(resOrd_dhdds,
"../../processed/DESEQ/DRvHS_DEseqSVA_dds_resOrdered_padj.csv",
row.names=TRUE)
# MA plot
maplot <- function (resOrd_cdrdds, thresh=0.05, labelsig=TRUE, textcx=1, ...) {
with(resOrd_cdrdds, plot(baseMean, log2FoldChange, pch=20, cex=.5, log="x", ...))
with(subset(resOrd_cdrdds, padj<thresh), points(baseMean, log2FoldChange, col="red", pch=20, cex=1.5))
if (labelsig) {
require(calibrate)
with(subset(resOrd_cdrdds, padj<thresh), textxy(baseMean, log2FoldChange, labs="Gene", cex=textcx, col=2))
}
}
png("diffexpr-maplot.png", 1500, 1000, pointsize=20)
maplot(resOrd_cdrdds, ylim=c(-2,2), main="MA Plot")
dev.off()
maplot(resOrd_cdrdds, ylim=c(-2,2), main="MA Plot C vs DR")
hs.dds <- results(dds_deseq, contrast=c("treatment","C","HS"))
(resOrd_hsdds <- hs.dds[order(hs.dds$padj), ])
write.csv(resOrd_hsdds,
"../../processed/DESEQ/CvHS_DEseqSVA_dds_resOrdered_padj.csv",
row.names=TRUE)
# MA plot
maplot <- function (resOrd_hsdds, thresh=0.05, labelsig=TRUE, textcx=1, ...) {
with(resOrd_hsdds, plot(baseMean, log2FoldChange, pch=20, cex=.5, log="x", ...))
with(subset(resOrd_hsdds, padj<thresh), points(baseMean, log2FoldChange, col="red", pch=20, cex=1.5))
if (labelsig) {
require(calibrate)
with(subset(resOrd_hsdds, padj<thresh), textxy(baseMean, log2FoldChange, labs="Gene", cex=textcx, col=2))
}
}
png("diffexpr-maplot.png", 1500, 1000, pointsize=20)
maplot(resOrd_hsdds, ylim=c(-2,2), main="MA Plot C vs HS")
dev.off()
maplot(resOrd_hsdds, ylim=c(-2,2), main="MA Plot C vs HS")
dh.dds <- results(dds_deseq, contrast=c("treatment","DR","HS"))
(resOrd_dhdds <- dh.dds[order(dh.dds$padj), ])
write.csv(resOrd_dhdds,
"../../processed/DESEQ/DRvHS_DEseqSVA_dds_resOrdered_padj.csv",
row.names=TRUE)
# MA plot
maplot <- function (resOrd_dhdds, thresh=0.05, labelsig=TRUE, textcx=1, ...) {
with(resOrd_dhdds, plot(baseMean, log2FoldChange, pch=20, cex=.5, log="x", ...))
with(subset(resOrd_dhdds, padj<thresh), points(baseMean, log2FoldChange, col="red", pch=20, cex=1.5))
if (labelsig) {
require(calibrate)
with(subset(resOrd_dhdds, padj<thresh), textxy(baseMean, log2FoldChange, labs="Gene", cex=textcx, col=2))
}
}
png("diffexpr-maplot.png", 1500, 1000, pointsize=20)
maplot(resOrd_dhdds, ylim=c(-2,2), main="MA Plot C vs HS")
maplot(resOrd_dhdds, ylim=c(-2,2), main="MA Plot C vs HS")
maplot(resOrd_dhdds, ylim=c(-2,2), main="MA Plot DR vs HS")
topT <- as.data.frame(resOrd_cdrdds)
cdr <- as.data.frame(resOrd_cdrdds)
# Volcano
par(mar=c(5,5,5,5), cex=1.0, cex.main=1.4, cex.axis=1.4, cex.lab=1.4)
cdr <- as.data.frame(resOrd_cdrdds)
#Adjusted P values (FDR Q values)
with(cdr, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", cex=1.0, xlab=bquote(~Log[2]~fold~change), ylab=bquote(~-log[10]~Q~value)))
with(subset(cdr, padj<0.05 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(padj), pch=20, col="red", cex=0.5))
with(subset(cdr, padj<0.05 & abs(log2FoldChange)>2), text(log2FoldChange, -log10(padj), labels=subset(rownames(topT), cdr$padj<0.05 & abs(cdr$log2FoldChange)>2), cex=0.8, pos=3))
# Volcano
par(mar=c(5,5,5,5), cex=1.0, cex.main=1.4, cex.axis=1.4, cex.lab=1.4)
cdr <- as.data.frame(resOrd_cdrdds)
#Adjusted P values (FDR Q values)
with(cdr, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", cex=1.0, xlab=bquote(~Log[2]~fold~change), ylab=bquote(~-log[10]~Q~value)))
with(subset(cdr, padj<0.05 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(padj), pch=20, col="red", cex=0.5))
with(subset(cdr, padj<0.05 & abs(log2FoldChange)>2), text(log2FoldChange, -log10(padj), labels=subset(rownames(cdr), cdr$padj<0.05 & abs(cdr$log2FoldChange)>2), cex=0.8, pos=3))
#Add lines for absolute FC>2 and P-value cut-off at FDR Q<0.05
abline(v=0, col="black", lty=3, lwd=1.0)
abline(v=-2, col="black", lty=4, lwd=2.0)
abline(v=2, col="black", lty=4, lwd=2.0)
abline(h=-log10(max(cdr$pvalue[cdr$padj<0.05], na.rm=TRUE)), col="black", lty=4, lwd=2.0)
# Volcano
par(mar=c(5,5,5,5), cex=1.0, cex.main=1.4, cex.axis=1.4, cex.lab=1.4)
hs <- as.data.frame(resOrd_hsdds)
#Adjusted P values (FDR Q values)
with(hs, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", cex=1.0, xlab=bquote(~Log[2]~fold~change), ylab=bquote(~-log[10]~Q~value)))
with(subset(hs, padj<0.05 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(padj), pch=20, col="red", cex=0.5))
with(subset(hs, padj<0.05 & abs(log2FoldChange)>2), text(log2FoldChange, -log10(padj), labels=subset(rownames(hs), hs$padj<0.05 & abs(hs$log2FoldChange)>2), cex=0.8, pos=3))
#Add lines for absolute FC>2 and P-value cut-off at FDR Q<0.05
abline(v=0, col="black", lty=3, lwd=1.0)
abline(v=-2, col="black", lty=4, lwd=2.0)
abline(v=2, col="black", lty=4, lwd=2.0)
abline(h=-log10(max(hs$pvalue[hs$padj<0.05], na.rm=TRUE)), col="black", lty=4, lwd=2.0)
# Volcano
par(mar=c(5,5,5,5), cex=1.0, cex.main=1.4, cex.axis=1.4, cex.lab=1.4)
drhs <- as.data.frame(resOrd_dhdds)
#Adjusted P values (FDR Q values)
with(drhs, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", cex=1.0, xlab=bquote(~Log[2]~fold~change), ylab=bquote(~-log[10]~Q~value)))
with(subset(drhs, padj<0.05 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(padj), pch=20, col="red", cex=0.5))
with(subset(drhs, padj<0.05 & abs(log2FoldChange)>2), text(log2FoldChange, -log10(padj), labels=subset(rownames(drhs), drhs$padj<0.05 & abs(drhs$log2FoldChange)>2), cex=0.8, pos=3))
#Add lines for absolute FC>2 and P-value cut-off at FDR Q<0.05
abline(v=0, col="black", lty=3, lwd=1.0)
abline(v=-2, col="black", lty=4, lwd=2.0)
abline(v=2, col="black", lty=4, lwd=2.0)
abline(h=-log10(max(drhs$pvalue[drhs$padj<0.05], na.rm=TRUE)), col="black", lty=4, lwd=2.0)
hs.dds <- results(dds_deseq, contrast=c("treatment","C","HS","DR"))
hs.dds <- results(dds_deseq, contrast=c("treatment"))
54*3
cat("", file="S06_abundances.txt")
indir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/"
outdir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/perl_postPrep_S04/ballG/"
base.cmd <- "stringtie -e -B -p 8 -G /group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/perl_postPrep_S04/stringtie_merged_pl.gtf -o "
for(ff in un.set)
{
cmd.cut <- paste(base.cmd,outdir,ff,"/",ff,"_ballgown.gtf ", indir,ff,"_merged.bam",sep="")
cat(cmd.cut,"\n", file="S06_abundances.txt",append=TRUE)
}
set <- data.frame('code'=unlist(lapply(strsplit(ll, split='_S',fixed=TRUE), function(x) x[1])), 'sample' = ll, stringsAsFactors=FALSE)
un.set <- unique(set$code)
cat("", file="S03_samtools_merge.txt")
for(ii in un.set)
{
samp.set <- subset(set, code==ii)
cat(paste("samtools merge -r  /group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/",ii,"_merged.bam ", "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/", samp.set$sample[1],".bam ","/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/", samp.set$sample[2],".bam ", "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/", samp.set$sample[3],".bam",sep=""), "\n", file=paste("S03_samtools_merge",".txt",sep=""),append=TRUE)
}
cat("", file="S02_samtools_all.txt")
for(ii in ll)
{
cat(paste("samtools sort -@ 8 -o /group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/",ii,".bam ", "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotsams/", ii,".sam ",sep=""), "\n", file=paste("S02_samtools_all",".txt",sep=""),append=TRUE)
}
library(tidyverse)
ll<-character(length=0)
runs<-c(1,2,3)
for(run in runs)
{
cat("", file=paste("S01_Align_cmd_run",run,".txt",sep=""))
ffs <- list.files(paste("/home/kingeg/Projects/RNA_SEQ_BasePop/Data/run",run,"/",sep=""), pattern="fastq.gz$")
for(ii in 1:length(ffs))
{
st.s <- "hisat2 --dta -q -x indexes/bdgp6_tran/genome_tran -U "
st.p <- paste("/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/run",run,"/",sep="")
outf <- paste("/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotsams/",strsplit(ffs[ii], ".", fixed=TRUE)[[1]][1],"_run",run,sep="")
cat(paste(st.s, st.p, ffs[ii], " -S ", outf,".sam",sep=""),"\n", file=paste("S01_Align_cmd_run",run,".txt",sep=""),append=TRUE)
ll<- c(ll,paste(strsplit(ffs[ii], ".", fixed=TRUE)[[1]][1],"_run",run,sep=""))
}
}
cat("", file="S02_samtools_all.txt")
for(ii in ll)
{
cat(paste("samtools sort -@ 8 -o /group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/",ii,".bam ", "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotsams/", ii,".sam ",sep=""), "\n", file=paste("S02_samtools_all",".txt",sep=""),append=TRUE)
}
set <- data.frame('code'=unlist(lapply(strsplit(ll, split='_S',fixed=TRUE), function(x) x[1])), 'sample' = ll, stringsAsFactors=FALSE)
un.set <- unique(set$code)
cat("", file="S03_samtools_merge.txt")
for(ii in un.set)
{
samp.set <- subset(set, code==ii)
cat(paste("samtools merge -r  /group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/",ii,"_merged.bam ", "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/", samp.set$sample[1],".bam ","/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/", samp.set$sample[2],".bam ", "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/", samp.set$sample[3],".bam",sep=""), "\n", file=paste("S03_samtools_merge",".txt",sep=""),append=TRUE)
}
# Assemble transcripts for each sample
cat("", file="S04_stringtie_assemble.txt")
cat("", file="assembled_file_list.txt")
indir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/"
outdir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotgtfs/"
base.cmd <- "stringtie -p 8 -G /group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/genes/dmel-all-r6.18.gtf -o "
for(ff in un.set)
{
samp.set <- paste(base.cmd,outdir,ff,"_assembled.gtf ",indir,ff,"_merged.bam",sep="")
cat(samp.set,"\n", file="S04_stringtie_assemble.txt",append=TRUE)
# For stringtie merge
cat(paste(outdir,ff,"_assembled.gtf",sep=""), "\n",file="mergelist.txt",append=TRUE)
}
# chunck probably deleted accidentally; remake or use regex
cat("", file="S06_abundances.txt")
indir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/"
outdir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/perl_postPrep_S04/ballG/"
base.cmd <- "stringtie -e -B -p 8 -G /group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/perl_postPrep_S04/stringtie_merged_pl.gtf -o "
for(ff in un.set)
{
cmd.cut <- paste(base.cmd,outdir,ff,"/",ff,"_ballgown.gtf ", indir,ff,"_merged.bam",sep="")
cat(cmd.cut,"\n", file="S06_abundances.txt",append=TRUE)
}
cat(cmd.cut,"\n", file="S06_abundances.txt",append=TRUE)
140581/344998
cat("", file="S06_abundances.txt")
indir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/"
outdir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/perl_postPrep_S04/ballG/"
base.cmd <- "stringtie -e -B -p 8 -G /group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/perl_postPrep_S04/stringtie_merged_pl.gtf -o "
for(ff in un.set)
{
cmd.cut <- paste(base.cmd,outdir,ff,"/",ff,"_ballgown.gtf ", indir,ff,"_merged.bam",sep="")
cat(cmd.cut,"\n", file="S06_abundances.txt",append=TRUE)
}
cat("", file="S06_abundances_pl.txt")
indir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/"
outdir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/perl_postPrep_S04/ballG/"
base.cmd <- "stringtie -e -B -p 8 -G /group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/perl_postPrep_S04/stringtie_merged_pl.gtf -o "
base.cmd <- "stringtie -e -B -p 8 -G /group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/perl_postPrep/stringtie_merged_pl.gtf -o "
for(ff in un.set)
{
cmd.cut <- paste(base.cmd,outdir,ff,"/",ff,"_ballgown.gtf ", indir,ff,"_merged.bam",sep="")
cat(cmd.cut,"\n", file="S06_abundances_pl.txt",append=TRUE)
}
cat("", file="S06_abundances_pl.txt")
indir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/"
outdir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/scripts/assembly/"
base.cmd <- "stringtie -e -B -p 8 -G /group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/perl_postPrep_S04/stringtie_merged_pl.gtf -o "
base.cmd <- "stringtie -e -B -p 8 -G /group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/perl_postPrep/stringtie_merged_pl.gtf -o "
for(ff in un.set)
{
cmd.cut <- paste(base.cmd,outdir,ff,"/",ff,"_ballgown.gtf ", indir,ff,"_merged.bam",sep="")
cat(cmd.cut,"\n", file="S06_abundances_pl.txt",append=TRUE)
}
cat("", file="S06_abundances_pl.txt")
indir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/"
outdir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/scripts/assembly/"
base.cmd <- "stringtie -e -B -p 8 -G /group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/perl_postPrep_S04/stringtie_merged_pl.gtf -o "
base.cmd <- "stringtie -e -B -p 8 -G /group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/perl_postPrep/stringtie_merged_pl.gtf -o "
for(ff in un.set)
{
cmd.cut <- paste(base.cmd,outdir,ff,"/",ff,"_ballgown.gtf ", indir,ff,"_merged.bam",sep="")
cat(cmd.cut,"\n", file="S06_abundances_pl.txt",append=TRUE)
}
cat("", file="S06_abundances_pl.txt")
indir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/"
outdir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/scripts/assembly/"
base.cmd <- "stringtie -e -B -p 8 -G /group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/perl_postPrep_S04/stringtie_merged_pl.gtf -o "
for(ff in un.set)
{
cmd.cut <- paste(base.cmd,outdir,ff,"/",ff,"_ballgown.gtf ", indir,ff,"_merged.bam",sep="")
cat(cmd.cut,"\n", file="S06_abundances_pl.txt",append=TRUE)
}
cat("", file="S06_abundances_pl.txt")
indir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/"
outdir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/scripts/assembly/"
base.cmd <- "stringtie -e -B -p 8 -G /group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/perl_postPrep_S04/stringtie_merged_pl.gtf -o "
for(ff in un.set)
{
cmd.cut <- paste(base.cmd,outdir,ff,"/",ff,"_ballgown.gtf ", indir,ff,"_merged.bam",sep="")
cat(cmd.cut,"\n", file="S06_abundances_pl.txt",append=TRUE)
}
cat("", file="/scripts/assembly/S06_abundances_pl.txt")
indir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/"
outdir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/scripts/assembly/"
base.cmd <- "stringtie -e -B -p 8 -G /group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/perl_postPrep_S04/stringtie_merged_pl.gtf -o "
for(ff in un.set)
{
cmd.cut <- paste(base.cmd,outdir,ff,"/",ff,"_ballgown.gtf ", indir,ff,"_merged.bam",sep="")
cat(cmd.cut,"\n", file="S06_abundances_pl.txt",append=TRUE)
}
cat("", file="../assembly/S06_abundances_pl.txt")
indir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/"
outdir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/scripts/assembly/"
base.cmd <- "stringtie -e -B -p 8 -G /group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/perl_postPrep_S04/stringtie_merged_pl.gtf -o "
for(ff in un.set)
{
cmd.cut <- paste(base.cmd,outdir,ff,"/",ff,"_ballgown.gtf ", indir,ff,"_merged.bam",sep="")
cat(cmd.cut,"\n", file="S06_abundances_pl.txt",append=TRUE)
}
cat("", file="../assembly/S06_abundances_pl.txt")
indir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/"
outdir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/scripts/assembly/"
base.cmd <- "stringtie -e -B -p 8 -G /group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/perl_postPrep_S04/stringtie_merged_pl.gtf -o "
for(ff in un.set)
{
cmd.cut <- paste(base.cmd,outdir,ff,"/",ff,"_ballgown.gtf ", indir,ff,"_merged.bam",sep="")
cat(cmd.cut,"\n", file="S06_abundances_pl.txt",append=TRUE)
}
cat("", file="../assembly/S06_abundances_pl.txt")
cat("", file="assembled_file_list.txt")
indir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/"
outdir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/scripts/assembly/"
base.cmd <- "stringtie -e -B -p 8 -G /group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/perl_postPrep_S04/stringtie_merged_pl.gtf -o "
for(ff in un.set)
{
cmd.cut <- paste(base.cmd,outdir,ff,"/",ff,"_ballgown.gtf ", indir,ff,"_merged.bam",sep="")
cat(cmd.cut,"\n", file="S06_abundances_pl.txt",append=TRUE)
}
setwd("~/MyGithub/BasePop_RNAseq/base_pop/scripts/assembly")
cat("", file="../assembly/S06_abundances_pl.txt")
indir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/dotbams/"
outdir <- "/group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/scripts/assembly/"
base.cmd <- "stringtie -e -B -p 8 -G /group/kinglab/enoch/MyGithub/BasePop_RNAseq/base_pop/processed/perl_postPrep_S04/stringtie_merged_pl.gtf -o "
for(ff in un.set)
{
cmd.cut <- paste(base.cmd,outdir,ff,"/",ff,"_ballgown.gtf ", indir,ff,"_merged.bam",sep="")
cat(cmd.cut,"\n", file="S06_abundances_pl.txt",append=TRUE)
}
setwd("~/MyGithub/BasePop_RNAseq/base_pop/scripts/assembly")
# Make phenotype data file (csv)
# ref. above where we make un.set
idd <- as.data.frame(un.set)
colnames(idd)[colnames(idd)=="un.set"] <- "id"
ids <- idd %>%
mutate(id = id,
treatment = str_split(id, "-", simplify = TRUE)[, 1])%>%
mutate(replic = str_split(id, "_", simplify = TRUE)[, 1],
tissue = str_split(id, "_", simplify = TRUE)[, 2]) %>%
unite(col="treat_tissue", c("treatment", "tissue"), sep="_", remove=FALSE)
write.csv(ids, file="describe_samples_pl.csv", row.names=FALSE, quote=FALSE)
library(tidyverse)
# Make phenotype data file (csv)
# ref. above where we make un.set
idd <- as.data.frame(un.set)
colnames(idd)[colnames(idd)=="un.set"] <- "id"
ids <- idd %>%
mutate(id = id,
treatment = str_split(id, "-", simplify = TRUE)[, 1])%>%
mutate(replic = str_split(id, "_", simplify = TRUE)[, 1],
tissue = str_split(id, "_", simplify = TRUE)[, 2]) %>%
unite(col="treat_tissue", c("treatment", "tissue"), sep="_", remove=FALSE)
write.csv(ids, file="describe_samples_pl.csv", row.names=FALSE, quote=FALSE)
# Make phenotype data file (csv)
# ref. above where we make un.set
idd <- as.data.frame(un.set)
colnames(idd)[colnames(idd)=="un.set"] <- "id"
ids <- idd %>%
mutate(id = id,
treatment = str_split(id, "-", simplify = TRUE)[, 1])%>%
mutate(replic = str_split(id, "_", simplify = TRUE)[, 1],
tissue = str_split(id, "_", simplify = TRUE)[, 2])
ids <- ids %>%
mutate(replic = replic,
replicate = str_split(replic, "-", simplify = TRUE)[, 2]) %>%
unite(col="treat_tissue", c("treatment", "replicate"), sep="", remove = FALSE) %>%
unite(col="treat_tissue", c("treat_tissue", "tissue"), sep ="_", remove = FALSE)
# reorder columns and assign first colum to row names
ids <- ids[,c(2,1,3:6)]
#rownames(ids) <- ids[,1]
#ids[,1] <- NULL
write.csv(ids, file="../../processed/describe_samplesDEpl.csv", row.names=FALSE, quote=FALSE)
# Make phenotype data file (csv)
# ref. above where we make un.set
idd <- as.data.frame(un.set)
colnames(idd)[colnames(idd)=="un.set"] <- "id"
ids <- idd %>%
mutate(id = id,
treatment = str_split(id, "-", simplify = TRUE)[, 1])%>%
mutate(replic = str_split(id, "_", simplify = TRUE)[, 1],
tissue = str_split(id, "_", simplify = TRUE)[, 2]) %>%
unite(col="treat_tissue", c("treatment", "tissue"), sep="_", remove=FALSE)
write.csv(ids, file="../../processed/describe_samples_pl.csv", row.names=FALSE, quote=FALSE)
